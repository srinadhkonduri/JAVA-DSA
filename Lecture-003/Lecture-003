What is Java?
Java is a programming language which is object oriented by nature.

It is owned by Oracle.
It is open-source and free
Java is an object oriented language which gives a clear structure to programs and allows code to
be reused, lowering development costs.

But wait, what is the history of java?
Java was developed by James Gosling, who is also known as the father of java, and his team
( also known as green team ) at Sun Microsystems (which is now a subsidiary of Oracle Corporation)
and released in 1995

First it was called as "Green talk" and It was originally designed for interactive television,
but it was too advanced technology for the digital cable television industry at the time.

However, it was best suited for internet programming.

After some time The name "Green talk" was changed to "Oak", and then in 1995, it was finally
renamed to "Java"!

But why Java?
Java is an island in Indonesia where the first coffee was produced (called java coffee.)
It is a kind of espresso bean. Java name was chosen by James Gosling while having a cup of
coffee nearby his office.

Why coffee Logo?
The Java logo is prototyped as a blue coffee cup with red steam above it.
The logo was a recognition for the Java engineers, who have a lot of coffee while
developing the Java programming language. The coffee that they have consumed was Java coffee beans.
It is a variety of coffee.

What is JDK?
JDK, or Java Development Kit, consist of tools that are used to develop and run Java code.
Before develop and run Java code, you should install it in your computer or system.
JDK consists of JRE and Java development tools.

JRE or Java Runtime Environment is a package that provides an environment to only run the
Java program on your machine. It is only used to run Java programs.

JDT or Java Development tools consist of many tools like compiler, debugger, and other
development tools.

To run code, we need JVM. JVM in each OS is different and to running Java,
We require an JVM compatible with the operating system. JVM is nothing but a interpreter

Why is Java platform-independent?
Java is platform-independent because it uses a virtual machine.
Bytecodes are effectively platform-independent. The virtual machine takes care of the differences
between the bytecodes for the different platforms, thus JVM is platform independent!

How a Java Program compiles?
Java code involves a two-step execution, first through an OS-independent compiler;
and second, in a virtual machine (JVM) which is custom-built for every operating system.

First, the source ‘.java’ file is passed through the compiler, which then encodes the source
code into a machine-independent encoding, known as Bytecode ( Generates ‘.Class’ files )

The class files generated by the compiler are independent of the machine or the OS,
which allows them to be run on any system. To run, the main class file (the class that contains
the method main) is passed to the JVM and then goes through three main stages before the final
machine code is executed.

These stages are:
ClassLoader The main class is loaded into the memory bypassing its ‘.class’ file to the JVM.
All the other classes referenced in the program are loaded through the class loader.
A class loader, itself an object, creates a flat namespace of class bodies that are referenced
by a string name.

Bytecode Verifier After the bytecode of a class is loaded by the class loader, it has to be
inspected by the bytecode verifier,whose job is to check that the instructions don’t perform
damaging actions. Like -> Variables are initialized before they are used. Local variable
accesses fall within the runtime stack, etc

Just-In-Time Compiler This is the final stage encountered by the java program, and its job is
to convert the loaded bytecode into machine code. It's main purpose is to do heavy optimizations
in performance.